Q. https://leetcode.com/problems/number-of-zero-filled-subarrays/

// Given an integer array nums, return the number of subarrays filled with 0.

A subarray is a contiguous non-empty sequence of elements within an array.

Input: nums = [1,3,0,0,2,0,0,4]
0 -> 1
0,0 -> 1 + 2
0,0,0 -> 1 + 2 + 3
Output: 6

1,3,5, 0,0,0,0, 0, 1,-1, -10


0 -> 

/**
*  [1,3,0,0,2,0,0,0]
*
*  l   r   c    sc
*  -1  0   0    0
*      1

*  2    2
*       3
*       4   3     4 - 2 = 2
*  -1   
*/


class Solution {
  public long zeroFilledSubarray(int[] nums) {
		long count = 0;
		int right = 0;
		int left = -1;
    // go through the array through right pointer
		while (right < nums.length) {
			if (nums[right] == 0) {
				if (left == -1) {
					left = right;
				}
				while ((right < nums.length) && (nums[right] == 0)) right++;
        // right - left will give the subarray count
				long subArrayCount = right - left;
        // the number of subarrays will be n * (n + 1) / 2
				count += (subArrayCount * (subArrayCount + 1)) / 2;
        // reset left
				left = -1;
        // this step is to skip the right++ 
				continue;
			}
			right++;
		}
		return count;
   }
}
